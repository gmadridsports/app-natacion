name: Integration tests
on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]
jobs:
  integration-tests-ios:
    runs-on: macos-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v3
      - name: Setup rsync
        uses: GuillaumeFalourd/setup-rsync@v1.1
      - name: Setup remote test artifacts
        run: |
          echo "${TEST_ARTIFACTS_SSH_KEY}" | base64 -d > ~/.ssh/id_github_piensasrv
          chmod 600 ~/.ssh/id_github_piensasrv
          echo "${TEST_ARTIFACTS_HOST}" | base64 -d > ${{ github.workspace }}/dev/tests/env/ssh-user-src-path
#          echo "~/.ssh/id_github_piensasrv" > ${{ github.workspace }}/dev/tests/env/ssh-private-key-path
        env:
          TEST_ARTIFACTS_SSH_KEY: ${{secrets.TEST_ARTIFACTS_SSH_KEY}}
          TEST_ARTIFACTS_HOST: ${{secrets.TEST_ARTIFACTS_HOST}}
      - name: setup known host for rsync
        run: ssh-keyscan -H dc991f7.online-server.cloud >> ~/.ssh/known_hosts
        env:
          TEST_ARTIFACTS_HOST: ${{ secrets.TEST_ARTIFACTS_HOST}}
      - name: test secret
        run: tail ${{ github.workspace }}/dev/tests/env/ssh-user-src-path
      - name: Copy latest branch test artifacts from the repository
        run: 'echo $GMADRID_TEST_ARTIFACTS_BRANCH_NAME && export GMADRID_TEST_ARTIFACTS_BRANCH_NAME && make test-artifacts-pull'
        env:
          GMADRID_TEST_ARTIFACTS_BRANCH_NAME: ${{ github.ref_name }}
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_DIST_BASE64: ${{ secrets.BUILD_CERTIFICATE_DIST_BASE64 }}
          BUILD_CERTIFICATE_DEV_BASE64: ${{ secrets.BUILD_CERTIFICATE_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_DIST_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DIST_BASE64 }}
          BUILD_PROVISION_PROFILE_DEV_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH_DIST=$RUNNER_TEMP/build_certificate_dist.p12
          CERTIFICATE_PATH_DEV=$RUNNER_TEMP/build_certificate_dev.p12
          PP_PATH_DIST=$RUNNER_TEMP/build_pp_dist.mobileprovision
          PP_PATH_DEV=$RUNNER_TEMP/build_pp_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_DIST_BASE64" | base64 --decode -o $CERTIFICATE_PATH_DIST
          echo -n "$BUILD_CERTIFICATE_DEV_BASE64" | base64 --decode -o $CERTIFICATE_PATH_DEV
          echo -n "$BUILD_PROVISION_PROFILE_DIST_BASE64" | base64 --decode -o $PP_PATH_DIST
          echo -n "$BUILD_PROVISION_PROFILE_DEV_BASE64" | base64 --decode -o $PP_PATH_DEV
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH_DIST -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH_DEV -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH_DIST ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH_DEV ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64
      - name: Run Flutter Pub Get
        run: flutter pub get
      - name: Google Cloud Auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
      - name: Install Patrol cli
        run: 'dart pub global activate patrol_cli'
      - name: Run iOS Integration tests
        run: 'make test-flutter-ios'
#  integration-tests-android:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get Repository
#        uses: actions/checkout@v3
#      - name: Setup Flutter SDK
#        uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#          architecture: x64
#      - name: Run Flutter Pub Get
#        run: flutter pub get
#      - name: Google Cloud Auth
#        uses: 'google-github-actions/auth@v0'
#        with:
#          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
#      - name: Setup Google Cloud SDK
#        uses: google-github-actions/setup-gcloud@v1.1.1
#      - name: Install Patrol cli
#        run: 'dart pub global activate patrol_cli'
#      - name: Run Android Integration tests
#        run: 'make test-flutter-android'
